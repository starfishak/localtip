import { Component, OnInit } from '@angular/core';
import { InterestService } from 'src/app/services/interest-service/interest.service'

@Component({
  selector: 'app-interest',
  templateUrl: './interest.page.html',
  styleUrls: ['./interest.page.scss'],
})
export class InterestPage implements OnInit {
  categories : any

  constructor(private InterestService : InterestService) {}

  async ngOnInit() {
      // Check if first-time user
      // this.InterestService.clearStorage()
      let status = await this.InterestService.newUser()
      if (status) {
          await this.InterestService.initUserInterest()
      }
      await this.InterestService.getPreferenceList()
      this.categories = this.InterestService.preference_list
      console.log(this.categories)
  }

    /**
     * Called when user toggles interest 'Segment'
     * e.g. called when user switches Going Out from Yes -> No, vise versa
     *
     * NB: There is an Ionic bug that makes this function run for each element, everytime the Interest DOM is built.
     * Therefore, inorder to prevent toggleing, there is an additional parameter passed into the toggleinterest() method
     * called 'toggle'. It is a boolean in the form of a string. "Yes" or "No" are the two options. When the dom is
     * building, the value represented by 'toggle' is what the value is actually toggled to in the DB.
     * For example, if the user has selected "Yes" to accomadation, when the page is built the 'toggle' value will be
     * yes. If the user presses "No", the toggle value will be "No". Therefore, we can abort the toggle method once
     * we realize it is generated by the DOM.
     * Very confusing. See this thread for more information:
     * https://forum.ionicframework.com/t/toggle-change-event/46000
     *
     * @param event passed by ionic, it is how we get our 'toggle' variable
     * @param id of the interest being toggled
     */
    async segmentChanged(event, id) {
        console.log(id)
        if (id == undefined) {
            return
        }
        this.InterestService.toggleInterest(id, event.target.value)
    }

}
